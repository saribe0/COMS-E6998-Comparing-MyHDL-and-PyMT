// File: sha1.v
// Generated by MyHDL 0.9.0
// Date: Thu Apr 19 16:57:50 2018


`timescale 1ns/10ps

module sha1 (
    clk,
    reset_n,
    cs,
    we,
    address,
    write_data,
    read_data,
    error
);


input clk;
input reset_n;
input cs;
input we;
input [7:0] address;
input [31:0] write_data;
output [31:0] read_data;
reg [31:0] read_data;
output error;
reg error;

reg digest_valid_reg;
reg core_ready;
reg core_digest_valid;
reg tmp_error;
reg block_we;
reg [159:0] core_digest;
reg [159:0] digest_reg;
reg init_reg;
reg next_new;
reg [511:0] core_block;
reg [31:0] tmp_read_data;
reg init_new;
reg next_reg;
reg ready_reg;
reg core_digest_valid_reg;
reg core_round_ctr_rst;
reg core_ready_flag;
reg [6:0] core_round_ctr_new;
reg [1:0] core_sha1_ctrl_new;
reg core_state_update;
reg [31:0] core_H1_new;
reg [31:0] core_H3_new;
reg [1:0] core_sha1_ctrl_reg;
reg [31:0] core_H1_reg;
reg [31:0] core_c_reg;
reg [31:0] core_d_new;
reg [31:0] core_H2_reg;
reg [31:0] core_a_reg;
reg [31:0] core_H0_new;
reg [31:0] core_c_new;
reg [31:0] core_a_new;
reg [31:0] core_H3_reg;
reg core_a_e_we;
reg core_sha1_ctrl_we;
reg [31:0] core_H4_reg;
reg [31:0] core_H2_new;
reg [31:0] core_b_new;
reg core_digest_valid_we;
reg [31:0] core_d_reg;
reg core_H_we;
reg [31:0] core_H4_new;
reg core_round_ctr_we;
reg [31:0] core_w;
reg core_w_init;
reg core_first_block;
reg [31:0] core_b_reg;
reg [31:0] core_e_reg;
reg core_digest_valid_new;
reg [6:0] core_round_ctr_reg;
reg [31:0] core_e_new;
reg [31:0] core_H0_reg;
reg core_digest_update;
reg core_state_init;
reg core_w_next;
reg core_round_ctr_inc;
reg core_digest_init;
reg core_w_mem_inst_sha1_w_mem_ctrl_we;
reg [31:0] core_w_mem_inst_w_mem07_new;
reg [31:0] core_w_mem_inst_w_mem15_new;
reg [6:0] core_w_mem_inst_w_ctr_reg;
reg [31:0] core_w_mem_inst_w_mem02_new;
reg [31:0] core_w_mem_inst_w_new;
reg [31:0] core_w_mem_inst_w_mem00_new;
reg [31:0] core_w_mem_inst_w_mem03_new;
reg [31:0] core_w_mem_inst_w_mem13_new;
reg [31:0] core_w_mem_inst_w_mem11_new;
reg core_w_mem_inst_w_ctr_rst;
reg [31:0] core_w_mem_inst_w_mem10_new;
reg [31:0] core_w_mem_inst_w_mem08_new;
reg core_w_mem_inst_w_ctr_we;
reg [31:0] core_w_mem_inst_w_mem09_new;
reg [31:0] core_w_mem_inst_w_mem04_new;
reg core_w_mem_inst_sha1_w_mem_ctrl_new;
reg [31:0] core_w_mem_inst_w_mem01_new;
reg [31:0] core_w_mem_inst_w_tmp;
reg core_w_mem_inst_w_ctr_inc;
reg [31:0] core_w_mem_inst_w_mem05_new;
reg [31:0] core_w_mem_inst_w_mem06_new;
reg [31:0] core_w_mem_inst_w_mem12_new;
reg [6:0] core_w_mem_inst_w_ctr_new;
reg [31:0] core_w_mem_inst_w_mem14_new;
reg core_w_mem_inst_w_mem_we;
reg core_w_mem_inst_sha1_w_mem_ctrl_reg;

reg [31:0] block_reg [0:16-1];
reg [31:0] core_w_mem_inst_w_mem [0:16-1];




always @(core_w_mem_inst_w_tmp) begin: SHA1_CORE_W_MEM_INST_LOGIC
    core_w = core_w_mem_inst_w_tmp;
end


always @(posedge clk, negedge reset_n) begin: SHA1_CORE_W_MEM_INST_REG_UPDATE
    integer i;
    if ((!reset_n)) begin
        for (i=0; i<16; i=i+1) begin
            core_w_mem_inst_w_mem[i] <= 0;
        end
        core_w_mem_inst_sha1_w_mem_ctrl_reg <= 0;
    end
    else begin
        if (core_w_mem_inst_w_mem_we) begin
            core_w_mem_inst_w_mem[0] <= core_w_mem_inst_w_mem00_new;
            core_w_mem_inst_w_mem[1] <= core_w_mem_inst_w_mem01_new;
            core_w_mem_inst_w_mem[2] <= core_w_mem_inst_w_mem02_new;
            core_w_mem_inst_w_mem[3] <= core_w_mem_inst_w_mem03_new;
            core_w_mem_inst_w_mem[4] <= core_w_mem_inst_w_mem04_new;
            core_w_mem_inst_w_mem[5] <= core_w_mem_inst_w_mem05_new;
            core_w_mem_inst_w_mem[6] <= core_w_mem_inst_w_mem06_new;
            core_w_mem_inst_w_mem[7] <= core_w_mem_inst_w_mem07_new;
            core_w_mem_inst_w_mem[8] <= core_w_mem_inst_w_mem08_new;
            core_w_mem_inst_w_mem[9] <= core_w_mem_inst_w_mem09_new;
            core_w_mem_inst_w_mem[10] <= core_w_mem_inst_w_mem10_new;
            core_w_mem_inst_w_mem[11] <= core_w_mem_inst_w_mem11_new;
            core_w_mem_inst_w_mem[12] <= core_w_mem_inst_w_mem12_new;
            core_w_mem_inst_w_mem[13] <= core_w_mem_inst_w_mem13_new;
            core_w_mem_inst_w_mem[14] <= core_w_mem_inst_w_mem14_new;
            core_w_mem_inst_w_mem[15] <= core_w_mem_inst_w_mem15_new;
        end
        if (core_w_mem_inst_w_ctr_we) begin
            core_w_mem_inst_w_ctr_reg <= core_w_mem_inst_w_ctr_new;
        end
        if (core_w_mem_inst_sha1_w_mem_ctrl_we) begin
            core_w_mem_inst_sha1_w_mem_ctrl_reg <= core_w_mem_inst_sha1_w_mem_ctrl_new;
        end
    end
end


always @(core_w_mem_inst_w_ctr_reg, core_w_mem_inst_w_new, core_w_mem_inst_w_mem[0], core_w_mem_inst_w_mem[1], core_w_mem_inst_w_mem[2], core_w_mem_inst_w_mem[3], core_w_mem_inst_w_mem[4], core_w_mem_inst_w_mem[5], core_w_mem_inst_w_mem[6], core_w_mem_inst_w_mem[7], core_w_mem_inst_w_mem[8], core_w_mem_inst_w_mem[9], core_w_mem_inst_w_mem[10], core_w_mem_inst_w_mem[11], core_w_mem_inst_w_mem[12], core_w_mem_inst_w_mem[13], core_w_mem_inst_w_mem[14], core_w_mem_inst_w_mem[15]) begin: SHA1_CORE_W_MEM_INST_SELECT_W
    if ((core_w_mem_inst_w_ctr_reg < 16)) begin
        core_w_mem_inst_w_tmp <= core_w_mem_inst_w_mem[core_w_mem_inst_w_ctr_reg[4-1:0]];
    end
    else begin
        core_w_mem_inst_w_tmp <= core_w_mem_inst_w_new;
    end
end


always @(core_w_init, core_block, core_w_mem_inst_w_ctr_reg, core_w_mem_inst_w_new, core_w_mem_inst_w_mem[0], core_w_mem_inst_w_mem[1], core_w_mem_inst_w_mem[2], core_w_mem_inst_w_mem[3], core_w_mem_inst_w_mem[4], core_w_mem_inst_w_mem[5], core_w_mem_inst_w_mem[6], core_w_mem_inst_w_mem[7], core_w_mem_inst_w_mem[8], core_w_mem_inst_w_mem[9], core_w_mem_inst_w_mem[10], core_w_mem_inst_w_mem[11], core_w_mem_inst_w_mem[12], core_w_mem_inst_w_mem[13], core_w_mem_inst_w_mem[14], core_w_mem_inst_w_mem[15]) begin: SHA1_CORE_W_MEM_INST_W_MEM_UPDATE_LOGIC
    reg [32-1:0] w_13;
    reg [32-1:0] w_16;
    reg [32-1:0] w_0;
    reg [32-1:0] w_8;
    reg [32-1:0] w_2;
    w_0 = 32'h0;
    w_2 = 32'h0;
    w_8 = 32'h0;
    w_13 = 32'h0;
    w_16 = 32'h0;
    core_w_mem_inst_w_mem00_new <= 0;
    core_w_mem_inst_w_mem01_new <= 0;
    core_w_mem_inst_w_mem02_new <= 0;
    core_w_mem_inst_w_mem03_new <= 0;
    core_w_mem_inst_w_mem04_new <= 0;
    core_w_mem_inst_w_mem05_new <= 0;
    core_w_mem_inst_w_mem06_new <= 0;
    core_w_mem_inst_w_mem07_new <= 0;
    core_w_mem_inst_w_mem08_new <= 0;
    core_w_mem_inst_w_mem09_new <= 0;
    core_w_mem_inst_w_mem10_new <= 0;
    core_w_mem_inst_w_mem11_new <= 0;
    core_w_mem_inst_w_mem12_new <= 0;
    core_w_mem_inst_w_mem13_new <= 0;
    core_w_mem_inst_w_mem14_new <= 0;
    core_w_mem_inst_w_mem15_new <= 0;
    core_w_mem_inst_w_mem_we <= 0;
    w_0 = core_w_mem_inst_w_mem[0];
    w_2 = core_w_mem_inst_w_mem[2];
    w_8 = core_w_mem_inst_w_mem[8];
    w_13 = core_w_mem_inst_w_mem[13];
    w_16 = (((w_13 ^ w_8) ^ w_2) ^ w_0);
    core_w_mem_inst_w_new[32-1:1] <= w_16[31-1:0];
    core_w_mem_inst_w_new[1-1:0] <= w_16[32-1:31];
    if (core_w_init) begin
        core_w_mem_inst_w_mem00_new <= core_block[512-1:480];
        core_w_mem_inst_w_mem01_new <= core_block[480-1:448];
        core_w_mem_inst_w_mem02_new <= core_block[448-1:416];
        core_w_mem_inst_w_mem03_new <= core_block[416-1:384];
        core_w_mem_inst_w_mem04_new <= core_block[384-1:352];
        core_w_mem_inst_w_mem05_new <= core_block[352-1:320];
        core_w_mem_inst_w_mem06_new <= core_block[320-1:288];
        core_w_mem_inst_w_mem07_new <= core_block[288-1:256];
        core_w_mem_inst_w_mem08_new <= core_block[256-1:224];
        core_w_mem_inst_w_mem09_new <= core_block[224-1:192];
        core_w_mem_inst_w_mem10_new <= core_block[192-1:160];
        core_w_mem_inst_w_mem11_new <= core_block[160-1:128];
        core_w_mem_inst_w_mem12_new <= core_block[128-1:96];
        core_w_mem_inst_w_mem13_new <= core_block[96-1:64];
        core_w_mem_inst_w_mem14_new <= core_block[64-1:32];
        core_w_mem_inst_w_mem15_new <= core_block[32-1:0];
        core_w_mem_inst_w_mem_we <= 1;
    end
    else if ((core_w_mem_inst_w_ctr_reg > 15)) begin
        core_w_mem_inst_w_mem00_new <= core_w_mem_inst_w_mem[1];
        core_w_mem_inst_w_mem01_new <= core_w_mem_inst_w_mem[2];
        core_w_mem_inst_w_mem02_new <= core_w_mem_inst_w_mem[3];
        core_w_mem_inst_w_mem03_new <= core_w_mem_inst_w_mem[4];
        core_w_mem_inst_w_mem04_new <= core_w_mem_inst_w_mem[5];
        core_w_mem_inst_w_mem05_new <= core_w_mem_inst_w_mem[6];
        core_w_mem_inst_w_mem06_new <= core_w_mem_inst_w_mem[7];
        core_w_mem_inst_w_mem07_new <= core_w_mem_inst_w_mem[8];
        core_w_mem_inst_w_mem08_new <= core_w_mem_inst_w_mem[9];
        core_w_mem_inst_w_mem09_new <= core_w_mem_inst_w_mem[10];
        core_w_mem_inst_w_mem10_new <= core_w_mem_inst_w_mem[11];
        core_w_mem_inst_w_mem11_new <= core_w_mem_inst_w_mem[12];
        core_w_mem_inst_w_mem12_new <= core_w_mem_inst_w_mem[13];
        core_w_mem_inst_w_mem13_new <= core_w_mem_inst_w_mem[14];
        core_w_mem_inst_w_mem14_new <= core_w_mem_inst_w_mem[15];
        core_w_mem_inst_w_mem15_new <= core_w_mem_inst_w_new;
        core_w_mem_inst_w_mem_we <= 1;
    end
end


always @(core_w_mem_inst_w_ctr_rst, core_w_mem_inst_w_ctr_inc, core_w_mem_inst_w_ctr_reg) begin: SHA1_CORE_W_MEM_INST_W_CTR
    core_w_mem_inst_w_ctr_new <= 0;
    core_w_mem_inst_w_ctr_we <= 0;
    if (core_w_mem_inst_w_ctr_rst) begin
        core_w_mem_inst_w_ctr_new <= 0;
        core_w_mem_inst_w_ctr_we <= 1;
    end
    if (core_w_mem_inst_w_ctr_inc) begin
        core_w_mem_inst_w_ctr_new <= (core_w_mem_inst_w_ctr_reg + 1);
        core_w_mem_inst_w_ctr_we <= 1;
    end
end


always @(core_w_mem_inst_sha1_w_mem_ctrl_reg, core_w_init, core_w_next, core_w_mem_inst_w_ctr_reg) begin: SHA1_CORE_W_MEM_INST_SHA1_W_MEM_FSM
    core_w_mem_inst_w_ctr_rst <= 0;
    core_w_mem_inst_w_ctr_inc <= 0;
    core_w_mem_inst_sha1_w_mem_ctrl_new <= 0;
    core_w_mem_inst_sha1_w_mem_ctrl_we <= 0;
    case (core_w_mem_inst_sha1_w_mem_ctrl_reg)
        'h0: begin
            if (core_w_init) begin
                core_w_mem_inst_w_ctr_rst <= 1;
                core_w_mem_inst_sha1_w_mem_ctrl_new <= 1;
                core_w_mem_inst_sha1_w_mem_ctrl_we <= 1;
            end
        end
        'h1: begin
            if (core_w_next) begin
                core_w_mem_inst_w_ctr_inc <= 1;
            end
            if ((core_w_mem_inst_w_ctr_reg == 79)) begin
                core_w_mem_inst_sha1_w_mem_ctrl_new <= 0;
                core_w_mem_inst_sha1_w_mem_ctrl_we <= 1;
            end
        end
        default: begin
            // pass
        end
    endcase
end


always @(core_digest_valid_reg, core_H2_reg, core_ready_flag, core_H4_reg, core_H0_reg, core_H3_reg, core_H1_reg) begin: SHA1_CORE_LOGIC
    core_ready = core_ready_flag;
    core_digest[160-1:128] = core_H0_reg;
    core_digest[128-1:96] = core_H1_reg;
    core_digest[96-1:64] = core_H2_reg;
    core_digest[64-1:32] = core_H3_reg;
    core_digest[32-1:0] = core_H4_reg;
    core_digest_valid = core_digest_valid_reg;
end


always @(posedge clk, negedge reset_n) begin: SHA1_CORE_REG_UPDATE
    if ((!reset_n)) begin
        core_a_reg <= 0;
        core_b_reg <= 0;
        core_c_reg <= 0;
        core_d_reg <= 0;
        core_e_reg <= 0;
        core_H0_reg <= 0;
        core_H1_reg <= 0;
        core_H2_reg <= 0;
        core_H3_reg <= 0;
        core_H4_reg <= 0;
        core_digest_valid_reg <= 0;
        core_round_ctr_reg <= 0;
        core_sha1_ctrl_reg <= 0;
    end
    else begin
        if (core_a_e_we) begin
            core_a_reg <= core_a_new;
            core_b_reg <= core_b_new;
            core_c_reg <= core_c_new;
            core_d_reg <= core_d_new;
            core_e_reg <= core_e_new;
        end
        if (core_H_we) begin
            core_H0_reg <= core_H0_new;
            core_H1_reg <= core_H1_new;
            core_H2_reg <= core_H2_new;
            core_H3_reg <= core_H3_new;
            core_H4_reg <= core_H4_new;
        end
        if (core_round_ctr_we) begin
            core_round_ctr_reg <= core_round_ctr_new;
        end
        if (core_digest_valid_we) begin
            core_digest_valid_reg <= core_digest_valid_new;
        end
        if (core_sha1_ctrl_we) begin
            core_sha1_ctrl_reg <= core_sha1_ctrl_new;
        end
    end
end


always @(core_digest_init, core_digest_update, core_H0_reg, core_H1_reg, core_H2_reg, core_H3_reg, core_H4_reg, core_a_reg, core_b_reg, core_c_reg, core_d_reg, core_e_reg) begin: SHA1_CORE_DIGEST_LOGIC
    core_H0_new <= 0;
    core_H1_new <= 0;
    core_H2_new <= 0;
    core_H3_new <= 0;
    core_H4_new <= 0;
    core_H_we <= 0;
    if (core_digest_init) begin
        core_H0_new <= 32'h67452301;
        core_H1_new <= 33'hefcdab89;
        core_H2_new <= 33'h98badcfe;
        core_H3_new <= 271733878;
        core_H4_new <= 33'hc3d2e1f0;
        core_H_we <= 1;
    end
    if (core_digest_update) begin
        core_H0_new <= (core_H0_reg + core_a_reg);
        core_H1_new <= (core_H1_reg + core_b_reg);
        core_H2_new <= (core_H2_reg + core_c_reg);
        core_H3_new <= (core_H3_reg + core_d_reg);
        core_H4_new <= (core_H4_reg + core_e_reg);
        core_H_we <= 1;
    end
end


always @(core_state_init, core_first_block, core_H0_reg, core_H1_reg, core_H2_reg, core_H3_reg, core_H4_reg, core_round_ctr_reg, core_a_reg, core_b_reg, core_c_reg, core_d_reg, core_e_reg, core_w, core_state_update) begin: SHA1_CORE_STATE_LOGIC
    reg [32-1:0] k;
    reg [32-1:0] a5;
    reg [32-1:0] t;
    reg [32-1:0] f;
    a5 = 32'h0;
    f = 32'h0;
    k = 32'h0;
    t = 32'h0;
    core_a_new <= 0;
    core_b_new <= 0;
    core_c_new <= 0;
    core_d_new <= 0;
    core_e_new <= 0;
    core_a_e_we <= 0;
    if (core_state_init) begin
        if (core_first_block) begin
            core_a_new <= 32'h67452301;
            core_b_new <= 33'hefcdab89;
            core_c_new <= 33'h98badcfe;
            core_d_new <= 271733878;
            core_e_new <= 33'hc3d2e1f0;
            core_a_e_we <= 1;
        end
        else begin
            core_a_new <= core_H0_reg;
            core_b_new <= core_H1_reg;
            core_c_new <= core_H2_reg;
            core_d_new <= core_H3_reg;
            core_e_new <= core_H4_reg;
            core_a_e_we <= 1;
        end
    end
    if (core_state_update) begin
        if ((core_round_ctr_reg <= 19)) begin
            k = 32'h5a827999;
            f = ((core_b_reg & core_c_reg) ^ ((~core_b_reg) & core_d_reg));
        end
        else if (((core_round_ctr_reg >= 20) && (core_round_ctr_reg <= 39))) begin
            k = 32'h6ed9eba1;
            f = ((core_b_reg ^ core_c_reg) ^ core_d_reg);
        end
        else if (((core_round_ctr_reg >= 40) && (core_round_ctr_reg <= 59))) begin
            k = 33'h8f1bbcdc;
            f = (((core_b_reg | core_c_reg) ^ (core_b_reg | core_d_reg)) ^ (core_c_reg | core_d_reg));
        end
        else if ((core_round_ctr_reg >= 60)) begin
            k = 33'hca62c1d6;
            f = ((core_b_reg ^ core_c_reg) ^ core_d_reg);
        end
        a5[32-1:5] = core_a_reg[27-1:0];
        a5[5-1:0] = core_a_reg[32-1:27];
        t = ((((a5 + core_e_reg) + f) + k) + core_w);
        core_a_new <= t;
        core_b_new <= core_a_reg;
        core_c_new[32-1:30] <= core_b_reg[2-1:0];
        core_c_new[30-1:0] <= core_b_reg[32-1:2];
        core_d_new <= core_c_reg;
        core_e_new <= core_d_reg;
        core_a_e_we <= 1;
    end
end


always @(core_round_ctr_rst, core_round_ctr_inc, core_round_ctr_reg) begin: SHA1_CORE_ROUND_CTR
    core_round_ctr_new <= 0;
    core_round_ctr_we <= 0;
    if (core_round_ctr_rst) begin
        core_round_ctr_new <= 0;
        core_round_ctr_we <= 1;
    end
    if (core_round_ctr_inc) begin
        core_round_ctr_new <= (core_round_ctr_reg + 1);
        core_round_ctr_we <= 1;
    end
end


always @(core_sha1_ctrl_reg, init_reg, core_round_ctr_reg, next_reg) begin: SHA1_CORE_SHA1_CTRL_FSM
    core_digest_init <= 0;
    core_digest_update <= 0;
    core_state_init <= 0;
    core_state_update <= 0;
    core_first_block <= 0;
    core_ready_flag <= 0;
    core_w_init <= 0;
    core_w_next <= 0;
    core_round_ctr_inc <= 0;
    core_round_ctr_rst <= 0;
    core_digest_valid_new <= 0;
    core_digest_valid_we <= 0;
    core_sha1_ctrl_new <= 0;
    core_sha1_ctrl_we <= 0;
    if ((core_sha1_ctrl_reg == 0)) begin
        core_ready_flag <= 1;
        if (init_reg) begin
            core_digest_init <= 1;
            core_w_init <= 1;
            core_state_init <= 1;
            core_first_block <= 1;
            core_round_ctr_rst <= 1;
            core_digest_valid_new <= 0;
            core_digest_valid_we <= 1;
            core_sha1_ctrl_new <= 1;
            core_sha1_ctrl_we <= 1;
        end
        if (next_reg) begin
            core_w_init <= 1;
            core_state_init <= 1;
            core_round_ctr_rst <= 1;
            core_digest_valid_new <= 0;
            core_digest_valid_we <= 1;
            core_sha1_ctrl_new <= 1;
            core_sha1_ctrl_we <= 1;
        end
    end
    else begin
        case (core_sha1_ctrl_reg)
            'h1: begin
                core_state_update <= 1;
                core_round_ctr_inc <= 1;
                core_w_next <= 1;
                if ((core_round_ctr_reg == 79)) begin
                    core_sha1_ctrl_new <= 2;
                    core_sha1_ctrl_we <= 1;
                end
            end
            'h2: begin
                core_digest_update <= 1;
                core_digest_valid_new <= 1;
                core_digest_valid_we <= 1;
                core_sha1_ctrl_new <= 0;
                core_sha1_ctrl_we <= 1;
            end
            default: begin
                // pass
            end
        endcase
    end
end


always @(address, cs, we, write_data, block_reg[0], block_reg[1], block_reg[2], block_reg[3], block_reg[4], block_reg[5], block_reg[6], block_reg[7], block_reg[8], block_reg[9], block_reg[10], block_reg[11], block_reg[12], block_reg[13], block_reg[14], block_reg[15], digest_reg, next_reg, init_reg, digest_valid_reg, ready_reg) begin: SHA1_API
    init_new <= 0;
    next_new <= 0;
    block_we <= 0;
    tmp_read_data <= 0;
    tmp_error <= 0;
    if (cs) begin
        if (we) begin
            if (((address >= 16) && (address <= 31))) begin
                block_we <= 1;
            end
            if ((address == 8)) begin
                init_new <= write_data[0];
                next_new <= write_data[1];
            end
        end
        else begin
            if (((address >= 16) && (address <= 31))) begin
                tmp_read_data <= block_reg[address[4-1:0]];
            end
            if (((address >= 32) && (address <= 36))) begin
                if ((address == 32)) begin
                    tmp_read_data <= digest_reg[160-1:128];
                end
                if ((address == 33)) begin
                    tmp_read_data <= digest_reg[128-1:96];
                end
                if ((address == 34)) begin
                    tmp_read_data <= digest_reg[96-1:64];
                end
                if ((address == 35)) begin
                    tmp_read_data <= digest_reg[64-1:32];
                end
                if ((address == 36)) begin
                    tmp_read_data <= digest_reg[32-1:0];
                end
            end
            case (address)
                'h0: begin
                    tmp_read_data <= 32'h73686131;
                end
                'h1: begin
                    tmp_read_data <= 538976288;
                end
                'h2: begin
                    tmp_read_data <= 808334896;
                end
                'h8: begin
                    tmp_read_data[32-1:2] <= 0;
                    tmp_read_data[2-1:1] <= next_reg;
                    tmp_read_data[1-1:0] <= init_reg;
                end
                'h9: begin
                    tmp_read_data[32-1:2] <= 0;
                    tmp_read_data[2-1:1] <= digest_valid_reg;
                    tmp_read_data[1-1:0] <= ready_reg;
                end
                default: begin
                    tmp_error <= 1;
                end
            endcase
        end
    end
end


always @(posedge clk, negedge reset_n) begin: SHA1_REG_UPDATE
    integer i;
    if ((!reset_n)) begin
        init_reg <= 0;
        next_reg <= 0;
        ready_reg <= 0;
        digest_reg <= 0;
        digest_valid_reg <= 0;
        for (i=0; i<16; i=i+1) begin
            block_reg[i] <= 0;
        end
    end
    else begin
        ready_reg <= core_ready;
        digest_valid_reg <= core_digest_valid;
        init_reg <= init_new;
        next_reg <= next_new;
        if (block_we) begin
            block_reg[address[4-1:0]] <= write_data;
        end
        if (core_digest_valid) begin
            digest_reg <= core_digest;
        end
    end
end


always @(tmp_read_data, block_reg[0], block_reg[1], block_reg[2], block_reg[3], block_reg[4], block_reg[5], block_reg[6], block_reg[7], block_reg[8], block_reg[9], block_reg[10], block_reg[11], block_reg[12], block_reg[13], block_reg[14], block_reg[15], tmp_error) begin: SHA1_LOGIC
    core_block[512-1:480] = block_reg[0];
    core_block[480-1:448] = block_reg[1];
    core_block[448-1:416] = block_reg[2];
    core_block[416-1:384] = block_reg[3];
    core_block[384-1:352] = block_reg[4];
    core_block[352-1:320] = block_reg[5];
    core_block[320-1:288] = block_reg[6];
    core_block[288-1:256] = block_reg[7];
    core_block[256-1:224] = block_reg[8];
    core_block[224-1:192] = block_reg[9];
    core_block[192-1:160] = block_reg[10];
    core_block[160-1:128] = block_reg[11];
    core_block[128-1:96] = block_reg[12];
    core_block[96-1:64] = block_reg[13];
    core_block[64-1:32] = block_reg[14];
    core_block[32-1:0] = block_reg[15];
    read_data = tmp_read_data;
    error = tmp_error;
end

endmodule
